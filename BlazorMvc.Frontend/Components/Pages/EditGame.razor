@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject GamesClient _gamesClient
@inject GenresClient _genresClient

<PageTitle>@title</PageTitle>
<h3 class="mt-3">@title</h3>

@if (genres is null || game is null) {

} else {
  <div class="row">
    <div class="col-6">
      <EditForm Model="@game" class="mt-3" OnValidSubmit="HandleSubmit" FormName="newGameForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
          <label for="name" class="form-label">Name:</label>
          <InputText  id="name" @bind-Value="game.Name" class="form-control" />
          <ValidationMessage For="() => game.Name" />
        </div>
          <div class="mb-3">
          <label for="genre" class="form-label">Genre:</label>
          <InputSelect id="genre" @bind-Value="game.GenreId" class="form-select">
            @foreach (var genre in genres) {
              <option value="@genre.Id">@genre.Name</option>
            }
          <ValidationMessage For="() => game.GenreId" />
          </InputSelect>
        </div>
          <div class="mb-3">
          <label for="price" class="form-label">Price:</label>
          <InputNumber id="price" @bind-Value="game.Price" class="form-control" />
          <ValidationMessage For="() => game.Price" />
        </div>
          <div class="mb-3">
          <label for="releaseDate" class="form-label">Release Date:</label>
          <InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary w-100 my-1">Submit</button>
        <a href="/" role="button" class="btn btn-secondary w-100 my-1">Cancel</a>
      </EditForm>
    </div>
  </div>
}

@code {
    [Parameter]
    public int? Id {get; set;}

    private string title = string.Empty;

    [SupplyParameterFromForm]
    private GameDetails? game {get; set;}

    private Genre[]? genres;

    protected override void OnParametersSet() {
      if (game is not null) {
        return;
      }

      if (Id is not null) {
        game = _gamesClient.GetGame(Id.Value);
        title = $"Edit {game.Name}";
      } else {
        game = new () {
          Name = string.Empty,
          ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
        };
        title = "New game";
      }
    } 

    protected override void OnInitialized() {
      genres = _genresClient.GetGenres();
    }

    private void HandleSubmit() {
      ArgumentNullException.ThrowIfNull(game);

      if (Id is null) _gamesClient.AddGame(game);
      else {
        game.Id = Id.Value;
        _gamesClient.UpdateGame(game);
      }
      
      NavigationManager.NavigateTo("/");
    }
}
